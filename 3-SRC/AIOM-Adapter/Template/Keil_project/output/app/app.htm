<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\app\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\app\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Wed Oct 15 14:45:06 2025
<BR><P>
<H3>Maximum Stack Usage =        616 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; actuator_poll &rArr; actuator_lock_process_test &rArr; get_actuator_hall_value &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[18]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[39]">CAU_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[33]">CMP0_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[34]">CMP1_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2b]">DAC_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[32]">DMAMUX_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[11]">DMA_Channel0_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[12]">DMA_Channel1_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[13]">DMA_Channel2_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[14]">DMA_Channel3_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[15]">DMA_Channel4_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[16]">DMA_Channel5_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[17]">DMA_Channel6_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[c]">EXTI0_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[31]">EXTI10_15_IRQHandler</a> from bsp_port.o(.text.EXTI10_15_IRQHandler) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[d]">EXTI1_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[e]">EXTI2_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[f]">EXTI3_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[10]">EXTI4_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[30]">EXTI5_9_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[a]">FMC_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[26]">I2C0_ER_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[25]">I2C0_EV_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[35]">I2C0_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3d]">I2C1_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[36]">I2C2_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3f]">LPTIMER_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[38]">LPUART_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3e]">LPUART_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[b]">RCU_CTC_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[9]">RTC_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3b]">SLCD_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[29]">SPI0_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_gd32l23x.o(.text.SystemInit) referenced from startup_gd32l233xx.o(.text)
 <LI><a href="#[8]">TAMPER_STAMP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1e]">TIMER11_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1f]">TIMER5_IRQHandler</a> from bsp_timer.o(.text.TIMER5_IRQHandler) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[20]">TIMER6_IRQHandler</a> from bsp_timer.o(.text.TIMER6_IRQHandler) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1d]">TIMER8_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3a]">TRNG_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[23]">UART3_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[24]">UART4_IRQHandler</a> from bsp_uart.o(.text.UART4_IRQHandler) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[21]">USART0_IRQHandler</a> from bsp_uart.o(.text.USART0_IRQHandler) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[37]">USART0_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[3c]">USART1_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[19]">USBD_HP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[1a]">USBD_LP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[2f]">USBD_WKUP_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32l233xx.o(.text) referenced from startup_gd32l233xx.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32l233xx.o(.text)
 <LI><a href="#[58]">do_nothing</a> from pc_cmd_handle.o(.text.do_nothing) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[45]">duanlu_exti_handler</a> from app_main.o(.text.duanlu_exti_handler) referenced 2 times from app_main.o(.text.bsp_config)
 <LI><a href="#[43]">key_rx_handler</a> from app_main.o(.text.key_rx_handler) referenced 2 times from app_main.o(.text.bsp_config)
 <LI><a href="#[47]">key_state_timer_handler</a> from app_main.o(.text.key_state_timer_handler) referenced 2 times from app_main.o(.text.bsp_config)
 <LI><a href="#[46]">led_state_timer_handler</a> from app_main.o(.text.led_state_timer_handler) referenced 2 times from app_main.o(.text.bsp_config)
 <LI><a href="#[40]">main</a> from app_main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[54]">on_get_device_info</a> from pc_cmd_handle.o(.text.on_get_device_info) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[52]">on_get_key_state</a> from pc_cmd_handle.o(.text.on_get_key_state) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[49]">on_key_response_package</a> from key_cmd_handle.o(.text.on_key_response_package) referenced 2 times from key_cmd_handle.o(.text.get_key_handler)
 <LI><a href="#[48]">on_key_response_state</a> from key_cmd_handle.o(.text.on_key_response_state) referenced 2 times from key_cmd_handle.o(.text.get_key_handler)
 <LI><a href="#[4b]">on_kiss_adapter_id</a> from pc_cmd_handle.o(.text.on_kiss_adapter_id) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[55]">on_opera_actuator</a> from pc_cmd_handle.o(.text.on_opera_actuator) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[57]">on_other_command</a> from pc_cmd_handle.o(.text.on_other_command) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[4c]">on_reset_adapter_id</a> from pc_cmd_handle.o(.text.on_reset_adapter_id) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[4a]">on_set_adapter_address</a> from pc_cmd_handle.o(.text.on_set_adapter_address) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[51]">on_set_key_address</a> from pc_cmd_handle.o(.text.on_set_key_address) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[50]">on_set_key_id</a> from pc_cmd_handle.o(.text.on_set_key_id) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[56]">on_set_mode</a> from pc_cmd_handle.o(.text.on_set_mode) referenced 4 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[53]">on_sync_end</a> from pc_cmd_handle.o(.text.on_sync_end) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[4d]">on_update_command</a> from pc_cmd_handle.o(.text.on_update_command) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[4f]">on_update_interrupt_table</a> from pc_cmd_handle.o(.text.on_update_interrupt_table) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[4e]">on_update_program</a> from pc_cmd_handle.o(.text.on_update_program) referenced 2 times from spq_function.o(.text.reg_handler)
 <LI><a href="#[44]">pc_rx_handler</a> from app_main.o(.text.pc_rx_handler) referenced 2 times from app_main.o(.text.bsp_config)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[61]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[106]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[107]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[108]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[109]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[10a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USBD_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l233xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_key_response_state
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_key_id
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[110]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[111]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[112]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_port.o(.text.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI10_15_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OPEN_FMQ</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, spq_function.o(.text.OPEN_FMQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OPEN_FMQ &rArr; bsp_port_toggle &rArr; gpio_bit_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_duanlu
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock_process_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock_process_test
</UL>

<P><STRONG><a name="[67]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segger_rtt_init
</UL>

<P><STRONG><a name="[69]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[6a]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[6e]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 916 bytes, Stack size 152 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
</UL>

<P><STRONG><a name="[72]"></a>S_QueueDataIn</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, queque.o(.text.S_QueueDataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = S_QueueDataIn &rArr; exit_critical_section
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical_section
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pc_rx_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_rx_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
</UL>

<P><STRONG><a name="[f3]"></a>S_QueueDataLen</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, queque.o(.text.S_QueueDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_QueueDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>S_QueueDataOut</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, queque.o(.text.S_QueueDataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = S_QueueDataOut &rArr; exit_critical_section
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical_section
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>S_QueueEmpty</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, queque.o(.text.S_QueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = S_QueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_clear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_key_state
</UL>

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, system_gd32l23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_64m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_delay_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_timer.o(.text.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER5_IRQHandler &rArr; timer_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_timer.o(.text.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER6_IRQHandler &rArr; timer_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART4_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_uart.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART4_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_uart.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l233xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>actuator_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, actuator.o(.text.actuator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = actuator_init &rArr; motor_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>actuator_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, actuator.o(.text.actuator_lock))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_opera_actuator
</UL>

<P><STRONG><a name="[88]"></a>actuator_poll</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, actuator.o(.text.actuator_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = actuator_poll &rArr; actuator_lock_process_test &rArr; get_actuator_hall_value &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock_process_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock_process_test
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>actuator_unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, actuator.o(.text.actuator_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_key_response_package
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_opera_actuator
</UL>

<P><STRONG><a name="[de]"></a>adc_calibration_enable</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32l23x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[db]"></a>adc_channel_length_config</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, gd32l23x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[8b]"></a>adc_charge_pulse_width_counter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32l23x_adc.o(.text.adc_charge_pulse_width_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_charge_pulse_width_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[da]"></a>adc_data_alignment_config</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, gd32l23x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[8a]"></a>adc_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32l23x_adc.o(.text.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_enable &rArr; adc_charge_pulse_width_counter
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_charge_pulse_width_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[dd]"></a>adc_external_trigger_config</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gd32l23x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[dc]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32l23x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[d6]"></a>adc_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gd32l23x_adc.o(.text.adc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_get
</UL>

<P><STRONG><a name="[d5]"></a>adc_flag_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32l23x_adc.o(.text.adc_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_get
</UL>

<P><STRONG><a name="[d3]"></a>adc_routine_channel_config</STRONG> (Thumb, 342 bytes, Stack size 28 bytes, gd32l23x_adc.o(.text.adc_routine_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adc_routine_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_get
</UL>

<P><STRONG><a name="[d7]"></a>adc_routine_data_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32l23x_adc.o(.text.adc_routine_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_get
</UL>

<P><STRONG><a name="[d4]"></a>adc_software_trigger_enable</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, gd32l23x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_get
</UL>

<P><STRONG><a name="[94]"></a>bsp_exti_init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, bsp_port.o(.text.bsp_exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_exti_init &rArr; nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[9d]"></a>bsp_get_port_value</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_port.o(.text.bsp_get_port_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_get_port_value &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
</UL>

<P><STRONG><a name="[9f]"></a>bsp_get_uart_rx_io_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_uart.o(.text.bsp_get_uart_rx_io_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_get_uart_rx_io_status &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_charging_state
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_key_state
</UL>

<P><STRONG><a name="[8e]"></a>bsp_port_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bsp_port.o(.text.bsp_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_port_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[8f]"></a>bsp_port_set</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_port.o(.text.bsp_port_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_port_set &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_duanlu
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_led_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_charging_state
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_key_state
</UL>

<P><STRONG><a name="[65]"></a>bsp_port_toggle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_port.o(.text.bsp_port_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_port_toggle &rArr; gpio_bit_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_timer_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duanlu_exti_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pc_rx_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_rx_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPEN_FMQ
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[96]"></a>bsp_timer_init</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, bsp_timer.o(.text.bsp_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bsp_timer_init &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[92]"></a>bsp_uart_init</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, bsp_uart.o(.text.bsp_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsp_uart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[b6]"></a>bsp_usart_send_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_uart.o(.text.bsp_usart_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_usart_send_byte &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[8d]"></a>clear_reset_flag</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_cpu.o(.text.clear_reset_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_reset_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[ea]"></a>delay_2_5us</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, delay.o(.text.delay_2_5us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_2_5us
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
</UL>

<P><STRONG><a name="[87]"></a>delay_ms</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_duanlu
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock_process_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock_process_test
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_command
</UL>

<P><STRONG><a name="[66]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, delay.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPEN_FMQ
</UL>

<P><STRONG><a name="[58]"></a>do_nothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pc_cmd_handle.o(.text.do_nothing))
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[45]"></a>duanlu_exti_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_main.o(.text.duanlu_exti_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = duanlu_exti_handler &rArr; handle_duanlu &rArr; OPEN_FMQ &rArr; bsp_port_toggle &rArr; gpio_bit_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_duanlu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_low_power
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(.text.bsp_config)
</UL>
<P><STRONG><a name="[73]"></a>enter_critical_section</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, bsp_cpu.o(.text.enter_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataIn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataOut
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_contiune_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
</UL>

<P><STRONG><a name="[bc]"></a>enter_low_power</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_cpu.o(.text.enter_low_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enter_low_power &rArr; pmu_to_sleepmode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_sleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>exit_critical_section</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, bsp_cpu.o(.text.exit_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exit_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataIn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataOut
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_contiune_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
</UL>

<P><STRONG><a name="[ba]"></a>exit_low_power</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_cpu.o(.text.exit_low_power))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_timer_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duanlu_exti_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pc_rx_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_rx_handler
</UL>

<P><STRONG><a name="[9c]"></a>exti_init</STRONG> (Thumb, 278 bytes, Stack size 20 bytes, gd32l23x_exti.o(.text.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
</UL>

<P><STRONG><a name="[63]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32l23x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32l23x_exti.o(.text.exti_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>exti_register_callback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_port.o(.text.exti_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[91]"></a>feed_fwdgt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.fwdgt.o(.text.feed_fwdgt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = feed_fwdgt
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_timer_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duanlu_exti_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pc_rx_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_rx_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[bf]"></a>fmc_contiune_write</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, port_config.o(.text.fmc_contiune_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = fmc_contiune_write &rArr; fmc_write_word &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical_section
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_adapter_address
</UL>

<P><STRONG><a name="[c1]"></a>fmc_erase_pages</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bsp_flash.o(.text.fmc_erase_pages))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fmc_erase_pages &rArr; fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_flag
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reset_adapter_id
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_adapter_address
</UL>

<P><STRONG><a name="[c6]"></a>fmc_flag_clear</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flags_clear
</UL>

<P><STRONG><a name="[c5]"></a>fmc_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32l23x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[c4]"></a>fmc_page_erase</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gd32l23x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[c2]"></a>fmc_unlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32l23x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[c9]"></a>fmc_word_program</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gd32l23x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
</UL>

<P><STRONG><a name="[c0]"></a>fmc_write_word</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsp_flash.o(.text.fmc_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = fmc_write_word &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_flag
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_contiune_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_adapter_address
</UL>

<P><STRONG><a name="[eb]"></a>fwdgt_config</STRONG> (Thumb, 248 bytes, Stack size 28 bytes, gd32l23x_fwdgt.o(.text.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>fwdgt_counter_reload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32l23x_fwdgt.o(.text.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
</UL>

<P><STRONG><a name="[ec]"></a>fwdgt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32l23x_fwdgt.o(.text.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>get_actuator_hall_value</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, actuator.o(.text.get_actuator_hall_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = get_actuator_hall_value &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock_process_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock_process_test
</UL>

<P><STRONG><a name="[e0]"></a>get_key_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, key_cmd_handle.o(.text.get_key_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_key_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
</UL>

<P><STRONG><a name="[d1]"></a>get_package_data</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, spq_function.o(.text.get_package_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_package_data &rArr; get_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_led_state
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_key_response_package
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_device_info
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_key_state
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_key_address
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_key_id
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_key_charging_state
</UL>

<P><STRONG><a name="[f9]"></a>get_package_direction</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, spq_function.o(.text.get_package_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_package_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_mode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_opera_actuator
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_device_info
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sync_end
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_key_state
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_command
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
</UL>

<P><STRONG><a name="[ab]"></a>gpio_af_set</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, gd32l23x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[a1]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
</UL>

<P><STRONG><a name="[a2]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
</UL>

<P><STRONG><a name="[a3]"></a>gpio_bit_toggle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>

<P><STRONG><a name="[9e]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32l23x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_port_value
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_uart_rx_io_status
</UL>

<P><STRONG><a name="[99]"></a>gpio_mode_set</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, gd32l23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[a0]"></a>gpio_output_options_set</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gd32l23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[ca]"></a>hall_adc_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hall.o(.text.hall_adc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hall_adc_get &rArr; adc_routine_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_routine_data_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_routine_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_actuator_hall_value
</UL>

<P><STRONG><a name="[81]"></a>hall_adc_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hall.o(.text.hall_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hall_adc_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_init
</UL>

<P><STRONG><a name="[bb]"></a>handle_duanlu</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spq_function.o(.text.handle_duanlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = handle_duanlu &rArr; OPEN_FMQ &rArr; bsp_port_toggle &rArr; gpio_bit_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPEN_FMQ
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duanlu_exti_handler
</UL>

<P><STRONG><a name="[df]"></a>handle_key_data</STRONG> (Thumb, 1198 bytes, Stack size 24 bytes, spq_function.o(.text.handle_key_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = handle_key_data &rArr; send_to_pc &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>handle_key_state</STRONG> (Thumb, 1834 bytes, Stack size 24 bytes, spq_function.o(.text.handle_key_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = handle_key_state &rArr; get_current_charging_state &rArr; query_key_charging_state &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueEmpty
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPEN_FMQ
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_charging_state
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_key_state
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_2_5us_optimized
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_uart_rx_io_status
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_timer_handler
</UL>

<P><STRONG><a name="[e6]"></a>handle_led_state</STRONG> (Thumb, 564 bytes, Stack size 64 bytes, spq_function.o(.text.handle_led_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = handle_led_state &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_timer_handler
</UL>

<P><STRONG><a name="[e8]"></a>handle_pc_data</STRONG> (Thumb, 1182 bytes, Stack size 24 bytes, spq_function.o(.text.handle_pc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = handle_pc_data &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>init_args</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spq_function.o(.text.init_args))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>key_state_timer_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_main.o(.text.key_state_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = key_state_timer_handler &rArr; handle_key_state &rArr; get_current_charging_state &rArr; query_key_charging_state &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_low_power
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(.text.bsp_config)
</UL>
<P><STRONG><a name="[e9]"></a>key_status_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, key_test.o(.text.key_status_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = key_status_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>key_status_poll</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, key_test.o(.text.key_status_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = key_status_poll &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_2_5us
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_uart_rx_io_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
</UL>

<P><STRONG><a name="[46]"></a>led_state_timer_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_main.o(.text.led_state_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = led_state_timer_handler &rArr; handle_led_state &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_led_state
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_low_power
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(.text.bsp_config)
</UL>
<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, app_main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = main &rArr; actuator_poll &rArr; actuator_lock_process_test &rArr; get_actuator_hall_value &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_low_power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataOut
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataLen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_poll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical_section
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_clear
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueEmpty
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_args
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segger_rtt_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f4]"></a>mcu_software_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_cpu.o(.text.mcu_software_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_software_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_command
</UL>

<P><STRONG><a name="[82]"></a>motor_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, motor.o(.text.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = motor_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_init
</UL>

<P><STRONG><a name="[f6]"></a>motor_off</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, motor.o(.text.motor_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_off &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[86]"></a>motor_right_on_pwm</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, motor.o(.text.motor_right_on_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = motor_right_on_pwm &rArr; motor_off &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_off
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock_process_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock_process_test
</UL>

<P><STRONG><a name="[9a]"></a>nvic_irq_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gd32l23x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[78]"></a>nvic_vector_table_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32l23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[54]"></a>on_get_device_info</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, pc_cmd_handle.o(.text.on_get_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = on_get_device_info &rArr; on_other_command &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[52]"></a>on_get_key_state</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, pc_cmd_handle.o(.text.on_get_key_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = on_get_key_state &rArr; send_to_pc &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[49]"></a>on_key_response_package</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, key_cmd_handle.o(.text.on_key_response_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = on_key_response_package &rArr; send_to_pc &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_cmd_handle.o(.text.get_key_handler)
</UL>
<P><STRONG><a name="[48]"></a>on_key_response_state</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, key_cmd_handle.o(.text.on_key_response_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_key_response_state
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_cmd_handle.o(.text.get_key_handler)
</UL>
<P><STRONG><a name="[4b]"></a>on_kiss_adapter_id</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, pc_cmd_handle.o(.text.on_kiss_adapter_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = on_kiss_adapter_id &rArr; send_nack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_contiune_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[55]"></a>on_opera_actuator</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, pc_cmd_handle.o(.text.on_opera_actuator))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = on_opera_actuator &rArr; send_nack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[57]"></a>on_other_command</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, pc_cmd_handle.o(.text.on_other_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = on_other_command &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_port_value
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_opera_actuator
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_device_info
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[4c]"></a>on_reset_adapter_id</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pc_cmd_handle.o(.text.on_reset_adapter_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = on_reset_adapter_id &rArr; send_ack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[4a]"></a>on_set_adapter_address</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, pc_cmd_handle.o(.text.on_set_adapter_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = on_set_adapter_address &rArr; send_ack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_contiune_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[51]"></a>on_set_key_address</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, pc_cmd_handle.o(.text.on_set_key_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = on_set_key_address &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[50]"></a>on_set_key_id</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pc_cmd_handle.o(.text.on_set_key_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = on_set_key_id &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[56]"></a>on_set_mode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pc_cmd_handle.o(.text.on_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_set_mode &rArr; get_package_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[53]"></a>on_sync_end</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pc_cmd_handle.o(.text.on_sync_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = on_sync_end &rArr; send_ack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[4d]"></a>on_update_command</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, pc_cmd_handle.o(.text.on_update_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = on_update_command &rArr; send_nack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_software_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[4f]"></a>on_update_interrupt_table</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, pc_cmd_handle.o(.text.on_update_interrupt_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = on_update_interrupt_table &rArr; send_nack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical_section
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_update_flag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[4e]"></a>on_update_program</STRONG> (Thumb, 876 bytes, Stack size 56 bytes, pc_cmd_handle.o(.text.on_update_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = on_update_program &rArr; send_nack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical_section
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_direction
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spq_function.o(.text.reg_handler)
</UL>
<P><STRONG><a name="[bd]"></a>pmu_to_sleepmode</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gd32l23x_pmu.o(.text.pmu_to_sleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmu_to_sleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_low_power
</UL>

<P><STRONG><a name="[cb]"></a>print_log</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bsp_log.o(.text.print_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segger_rtt_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_actuator_hall_value
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_poll
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_command
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[d9]"></a>rcu_adc_clock_config</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[b9]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32l23x_rcu.o(.text.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_reset_flag
</UL>

<P><STRONG><a name="[a4]"></a>rcu_clock_freq_get</STRONG> (Thumb, 2154 bytes, Stack size 144 bytes, gd32l23x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[ee]"></a>rcu_flag_get</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32l23x_rcu.o(.text.rcu_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[100]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[ff]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[f0]"></a>reg_handler</STRONG> (Thumb, 350 bytes, Stack size 4 bytes, spq_function.o(.text.reg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_mode
</UL>

<P><STRONG><a name="[ed]"></a>segger_rtt_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_log.o(.text.segger_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = segger_rtt_init &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>send_ack_from_package</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, spq_function.o(.text.send_ack_from_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = send_ack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_opera_actuator
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sync_end
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_command
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_reset_adapter_id
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_adapter_address
</UL>

<P><STRONG><a name="[f1]"></a>send_buff_clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port_config.o(.text.send_buff_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = send_buff_clear &rArr; S_QueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>send_buff_start</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, port_config.o(.text.send_buff_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = send_buff_start &rArr; S_QueueDataOut &rArr; exit_critical_section
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataOut
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataLen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>send_nack_from_package</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, spq_function.o(.text.send_nack_from_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = send_nack_from_package &rArr; uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_opera_actuator
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_command
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
</UL>

<P><STRONG><a name="[e7]"></a>send_to_key</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, port_config.o(.text.send_to_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataIn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_led_state
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_other_command
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_key_address
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_set_key_id
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_key_charging_state
</UL>

<P><STRONG><a name="[e1]"></a>send_to_pc</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, port_config.o(.text.send_to_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = send_to_pc &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataIn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_key_response_package
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_device_info
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_get_key_state
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_kiss_adapter_id
</UL>

<P><STRONG><a name="[9b]"></a>syscfg_exti_line_config</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, gd32l23x_syscfg.o(.text.syscfg_exti_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syscfg_exti_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
</UL>

<P><STRONG><a name="[a8]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32l23x_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[a5]"></a>timer_deinit</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, gd32l23x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[aa]"></a>timer_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32l23x_timer.o(.text.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[a7]"></a>timer_init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gd32l23x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[a9]"></a>timer_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32l23x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[7a]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32l23x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32l23x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>timer_register_callback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_timer.o(.text.timer_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[a6]"></a>timer_struct_para_init</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32l23x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
</UL>

<P><STRONG><a name="[93]"></a>uart_register_callback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_uart.o(.text.uart_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
</UL>

<P><STRONG><a name="[fd]"></a>uart_send</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, port_config.o(.text.uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = uart_send &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nack_from_package
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack_from_package
</UL>

<P><STRONG><a name="[b0]"></a>usart_baudrate_set</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, gd32l23x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[7c]"></a>usart_data_receive</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32l23x_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart_send_byte
</UL>

<P><STRONG><a name="[ac]"></a>usart_deinit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gd32l23x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[b3]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32l23x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[b8]"></a>usart_flag_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gd32l23x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart_send_byte
</UL>

<P><STRONG><a name="[b5]"></a>usart_interrupt_disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[b4]"></a>usart_interrupt_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[7d]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, gd32l23x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>usart_parity_config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[b1]"></a>usart_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[ae]"></a>usart_stop_bit_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[b2]"></a>usart_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[ad]"></a>usart_word_length_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32l23x_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[101]"></a>vref_deinit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32l23x_vref.o(.text.vref_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_init
</UL>

<P><STRONG><a name="[103]"></a>vref_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32l23x_vref.o(.text.vref_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_init
</UL>

<P><STRONG><a name="[102]"></a>vref_high_impedance_mode_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32l23x_vref.o(.text.vref_high_impedance_mode_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_init
</UL>

<P><STRONG><a name="[d8]"></a>vref_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hall.o(.text.vref_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vref_init &rArr; vref_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_status_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_high_impedance_mode_disable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_enable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_deinit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_adc_init
</UL>

<P><STRONG><a name="[104]"></a>vref_status_get</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, gd32l23x_vref.o(.text.vref_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vref_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vref_init
</UL>

<P><STRONG><a name="[90]"></a>watch_delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, port_config.o(.text.watch_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = watch_delay &rArr; bsp_port_toggle &rArr; gpio_bit_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_state_timer_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_timer_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duanlu_exti_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_pc_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_buff_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pc_rx_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_rx_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_config
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_program
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[fc]"></a>write_update_flag</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iap.o(.text.write_update_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = write_update_flag &rArr; fmc_write_word &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_update_interrupt_table
</UL>

<P><STRONG><a name="[113]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[114]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[115]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8c]"></a>bsp_config</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, app_main.o(.text.bsp_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bsp_config &rArr; bsp_uart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_register_callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_register_callback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_exti_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_reset_flag
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>key_rx_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_main.o(.text.key_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = key_rx_handler &rArr; S_QueueDataIn &rArr; exit_critical_section
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataIn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_low_power
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(.text.bsp_config)
</UL>
<P><STRONG><a name="[44]"></a>pc_rx_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_main.o(.text.pc_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pc_rx_handler &rArr; S_QueueDataIn &rArr; exit_critical_section
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueDataIn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_low_power
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_fwdgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(.text.bsp_config)
</UL>
<P><STRONG><a name="[76]"></a>_soft_delay_</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_gd32l23x.o(.text._soft_delay_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _soft_delay_
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[77]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32l23x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = system_clock_config &rArr; system_clock_64m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_64m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fe]"></a>system_clock_64m_hxtal</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, system_gd32l23x.o(.text.system_clock_64m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_clock_64m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[f7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gd32l23x_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[f8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gd32l23x_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[c7]"></a>fmc_ready_wait</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd32l23x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[c8]"></a>fmc_state_get</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, gd32l23x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[c3]"></a>fmc_flags_clear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_flash.o(.text.fmc_flags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fmc_flags_clear &rArr; fmc_flag_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_write_word
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_pages
</UL>

<P><STRONG><a name="[f5]"></a>__NVIC_SystemReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_cpu.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_software_reset
</UL>

<P><STRONG><a name="[d2]"></a>get_sum</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, spq_function.o(.text.get_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>

<P><STRONG><a name="[d0]"></a>delay_2_5us_optimized</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, spq_function.o(.text.delay_2_5us_optimized))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_2_5us_optimized
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_key_state
</UL>

<P><STRONG><a name="[ce]"></a>get_current_key_state</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, spq_function.o(.text.get_current_key_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_current_key_state &rArr; bsp_get_uart_rx_io_status &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_QueueEmpty
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_2_5us_optimized
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_uart_rx_io_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
</UL>

<P><STRONG><a name="[cc]"></a>get_current_charging_state</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, spq_function.o(.text.get_current_charging_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = get_current_charging_state &rArr; query_key_charging_state &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_port_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_key_charging_state
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_uart_rx_io_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key_state
</UL>

<P><STRONG><a name="[cd]"></a>query_key_charging_state</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spq_function.o(.text.query_key_charging_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = query_key_charging_state &rArr; send_to_key &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_key
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_package_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_charging_state
</UL>

<P><STRONG><a name="[68]"></a>_DoInit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, segger_rtt.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[6b]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, segger_rtt.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6c]"></a>_WriteNoCheck</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, segger_rtt.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6d]"></a>_WriteBlocking</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, segger_rtt.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6f]"></a>_StoreChar</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, segger_rtt_printf.o(.text._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[70]"></a>_PrintInt</STRONG> (Thumb, 460 bytes, Stack size 80 bytes, segger_rtt_printf.o(.text._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[71]"></a>_PrintUnsigned</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, segger_rtt_printf.o(.text._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[89]"></a>actuator_unlock_process_test</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, actuator.o(.text.actuator_unlock_process_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = actuator_unlock_process_test &rArr; get_actuator_hall_value &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_actuator_hall_value
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_state_anlysis
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPEN_FMQ
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_poll
</UL>

<P><STRONG><a name="[83]"></a>actuator_lock_process_test</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, actuator.o(.text.actuator_lock_process_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = actuator_lock_process_test &rArr; get_actuator_hall_value &rArr; print_log &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_right_on_pwm
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_actuator_hall_value
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_state_anlysis
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPEN_FMQ
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_poll
</UL>

<P><STRONG><a name="[85]"></a>actuator_state_anlysis</STRONG> (Thumb, 274 bytes, Stack size 28 bytes, actuator.o(.text.actuator_state_anlysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = actuator_state_anlysis
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_lock_process_test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_unlock_process_test
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
